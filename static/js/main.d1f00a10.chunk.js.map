{"version":3,"sources":["components/AddForm/AddForm.jsx","components/Subscriptions/Subscriptions.jsx","App.js","serviceWorker.js","index.js"],"names":["axios","require","default","AddForm","email","urlInput","useRef","onSubmit","event","preventDefault","console","log","current","value","method","url","data","productUrl","then","response","catch","error","handleUrlSubmit","class","style","paddingRight","type","name","id","for","ref","tabindex","ExampleToast","children","useState","show","toggleShow","Button","onClick","Toast","onClose","Header","className","Body","Subscriptions","Container","Jumbotron","role","aria-label","App","setEmail","textInput","handleEmailSubmit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mTAEMA,G,MAAQC,EAAQ,IAASC,SAkDhBC,MAhDf,SAAiBC,GAChB,IAAMC,EAAWC,iBAAO,MAuBxB,OACC,0BACCC,SAAU,SAACC,IArBW,SAACA,GACxBA,EAAMC,iBACNC,QAAQC,IAAIN,EAASO,QAAQC,OAC7Bb,EAAM,CACLc,OAAQ,OACRC,IAPgB,2EAShBC,KAAM,CACLZ,MAAOA,EAAMA,MACba,WAAYZ,EAASO,QAAQC,SAG7BK,MAAK,SAASC,GACdT,QAAQC,IAAIQ,MAEZC,OAAM,SAASC,GACfX,QAAQC,IAAIU,MAMZC,CAAgBd,KAGjB,yBAAKe,MAAM,OACV,wBAAIC,MAAO,CAAEC,aAAc,SAA3B,6BACA,2BAAOC,KAAK,WAAWC,KAAK,iBAAiBC,GAAG,mBAChD,2BAAOC,IAAI,kBAAX,aAED,wBAAIN,MAAM,aAAV,eAEA,yBAAKA,MAAM,OACV,2BAAOG,KAAK,OAAOC,KAAK,cAAcC,GAAG,cAAcE,IAAKzB,IAC5D,2BAAOwB,IAAI,eAAX,OACA,4BAAQH,KAAK,SAASK,SAAS,KAA/B,a,uCCrCEC,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACRC,oBAAS,GADD,mBAC5BC,EAD4B,KACtBC,EADsB,KAGnC,OACE,qCACID,GAAQ,kBAACE,EAAA,EAAD,CAAQC,QAAS,kBAAMF,GAAW,KAAlC,cACV,kBAACG,EAAA,EAAD,CAAOJ,KAAMA,EAAMK,QAAS,kBAAMJ,GAAW,KAC3C,kBAACG,EAAA,EAAME,OAAP,KACE,4BAAQC,UAAU,WAAlB,oBAEF,kBAACH,EAAA,EAAMI,KAAP,KAAaV,MAmBRW,EAbS,kBACpB,kBAACC,EAAA,EAAD,CAAWH,UAAU,OACnB,kBAACI,EAAA,EAAD,KACE,kBAAC,EAAD,0BAEE,0BAAMC,KAAK,MAAMC,aAAW,QAA5B,oB,MCWKC,MAjCf,WAAgB,IAAD,EACcf,mBAAS,QADvB,mBACN9B,EADM,KACC8C,EADD,KAERC,EAAY7C,iBAAO,MAQzB,OACC,yBAAKoC,UAAU,OACd,+CACA,0BACCnC,SAAU,SAACC,IAVY,SAACA,GAC1BA,EAAMC,iBACNyC,EAASC,EAAUvC,QAAQC,OAC3BH,QAAQC,IAAIP,GAQTgD,CAAkB5C,KAGnB,wBAAIe,MAAM,aAAV,kCACA,yBAAKA,MAAM,OACV,2BAAOG,KAAK,OAAOC,KAAK,QAAQC,GAAG,QAAQE,IAAKqB,IAChD,2BAAOtB,IAAI,SAAX,WACA,4BAAQH,KAAK,SAASK,SAAS,KAA/B,YAKF,kBAAC,EAAD,CAAS3B,MAAOA,IAChB,kBAAC,EAAD,CAAeA,MAAOA,MCtBLiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAC,GACLX,QAAQW,MAAMA,EAAM+C,c","file":"static/js/main.d1f00a10.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\nimport './AddForm.css';\r\nconst axios = require('axios').default;\r\n\r\nfunction AddForm(email) {\r\n\tconst urlInput = useRef(null);\r\n\r\n\tconst serverUrl = 'https://x25iuvslok.execute-api.ap-south-1.amazonaws.com/dev/api/bargains';\r\n\r\n\tconst handleUrlSubmit = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tconsole.log(urlInput.current.value);\r\n\t\taxios({\r\n\t\t\tmethod: 'post',\r\n\t\t\turl: serverUrl,\r\n\r\n\t\t\tdata: {\r\n\t\t\t\temail: email.email,\r\n\t\t\t\tproductUrl: urlInput.current.value\r\n\t\t\t}\r\n\t\t})\r\n\t\t\t.then(function(response) {\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t})\r\n\t\t\t.catch(function(error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t};\r\n\treturn (\r\n\t\t<form\r\n\t\t\tonSubmit={(event) => {\r\n\t\t\t\thandleUrlSubmit(event);\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div class=\"row\">\r\n\t\t\t\t<h5 style={{ paddingRight: '20px' }}>Toogle Subscription Alert</h5>\r\n\t\t\t\t<input type=\"checkbox\" name=\"fancy-checkbox\" id=\"fancy-checkbox\" />\r\n\t\t\t\t<label for=\"fancy-checkbox\">Checkbox</label>\r\n\t\t\t</div>\r\n\t\t\t<h5 class=\"text-help\">Add Product</h5>\r\n\r\n\t\t\t<div class=\"row\">\r\n\t\t\t\t<input type=\"text\" name=\"product-url\" id=\"product-url\" ref={urlInput} />\r\n\t\t\t\t<label for=\"product-url\">Url</label>\r\n\t\t\t\t<button type=\"submit\" tabindex=\"0\">\r\n\t\t\t\t\tSubmit\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default AddForm;\r\n","import React, { useState } from 'react';\r\nimport './Subscriptions.css';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Toast from 'react-bootstrap/Toast';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport \"./Subscriptions.css\"\r\nconst ExampleToast = ({ children }) => {\r\n    const [show, toggleShow] = useState(true);\r\n  \r\n    return (\r\n      <>\r\n        {!show && <Button onClick={() => toggleShow(true)}>Show Toast</Button>}\r\n        <Toast show={show} onClose={() => toggleShow(false)}>\r\n          <Toast.Header>\r\n            <strong className=\"mr-auto\">React-Bootstrap</strong>\r\n          </Toast.Header>\r\n          <Toast.Body>{children}</Toast.Body>\r\n        </Toast>\r\n      </>\r\n    );\r\n  };\r\n  \r\n  const Subscriptions = () => (\r\n    <Container className=\"p-3\">\r\n      <Jumbotron>\r\n        <ExampleToast>\r\n          We now have Toasts\r\n          <span role=\"img\" aria-label=\"tada\">\r\n            ðŸŽ‰\r\n          </span>\r\n        </ExampleToast>\r\n        \r\n      </Jumbotron>\r\n    </Container>\r\n  );\r\nexport default Subscriptions;\r\n","import React, { useState, useRef } from 'react';\nimport AddForm from './components/AddForm/AddForm';\nimport Subscriptions from './components/Subscriptions/Subscriptions';\nimport './App.css';\nimport './components/AddForm/AddForm.css';\n\nfunction App() {\n\tconst [ email, setEmail ] = useState('amit');\n\tconst textInput = useRef(null);\n\n\tconst handleEmailSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tsetEmail(textInput.current.value);\n\t\tconsole.log(email);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1> Price Tracker </h1>\n\t\t\t<form\n\t\t\t\tonSubmit={(event) => {\n\t\t\t\t\thandleEmailSubmit(event);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<h5 class=\"text-help\"> Please enter your email here </h5>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<input type=\"text\" name=\"email\" id=\"email\" ref={textInput} />\n\t\t\t\t\t<label for=\"email\"> Email </label>\n\t\t\t\t\t<button type=\"submit\" tabindex=\"0\">\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t\t<AddForm email={email} />\n\t\t\t<Subscriptions email={email} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}